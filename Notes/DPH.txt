DPH Notes:

1) Do not use $:

incsum :: [:Int:] -> Int
incsum xs = sumP(mapP (PI.+ 1) xs)
...works

incsum :: [:Int:] -> Int
incsum xs = sumP= $ mapP (PI.+ 1) xs
...does not.

*** Vectorisation error ***
    Variable not vectorised: GHC.Base.$

2) Need pragmas:

{-# LANGUAGE ParallelArrays #-}
{-# OPTIONS_GHC -fvectorise #-}

sometimes {-# NOINLINE incsumW #-} is useful.

3) Separate Vectorised from Non-vectorised:

*** Vectorisation error ***
    Tycon not vectorised:  GHC.Prim.RealWorld

indicates that perhaps you need to move your vectorised code into another module and import it and surround with NOINLINE

Compile as ghc --make -threaded -Odph simp...hs simp...Main.hs

(BTW: module names must be Capitalised)

4) Empty lists not valid for [: Int :]

quickSortP' :: [:Int:] -> [:Int:]
quickSortP' [::] = [::]
quickSortP' xs = ...

yielded:

[1 of 1] Compiling QuickSort        ( quickSortPar.hs, quickSortPar.o )
exprType TYPE ghc-prim:GHC.Types.Int{(w) tc 3J}
*** Vectorisation error ***
    Can't vectorise expression GHC.Prim.Int#

Removing the empty array expression and replacing it with one that accepts a list of a single item as the base case makes things work.

5) [::] is not an instance of Eq, but PArray is.

... filterP (/= leftNodeMST) msts
must become
... filterP (\mst -> (toPArrayP mst) /= (toPArrayP leftNodeMST))
but that is broken to. See (6)

6) /=, == on [::] not valid

I had to do some horrible comparison operation:
notEqualGraph :: Graph -> Graph -> Bool
notEqualGraph es fs = B.not (andP (mapP (\i -> equalEdge (indexP es i) (indexP fs i)) (enumFromToP 0 (lengthP es I.- 1))))
equalEdge :: Edge -> Edge -> Bool
equalEdge e@(n1, n2) f@(n3, n4) = n1 I.== n3 B.&& n2 I.== n4

7) Missing cons (:)

e : es
must become
(singleton e) +:+ es 

8) (e:es) pattern matching can be forced

blah (e:es) = f e + blah es
can become
blah es | lengthP es I.== 1 = f (es !: 0)
blah es = f (es !: 0) + blah (sliceP 1 ((lengthP es) I.- 1) es)

No guarantees on efficiency!

9) [::] should be replaced with emptyP

kruskal :: [:Edge:] -> [:Graph:] -> [:Graph:]
kruskal ... = [::]
Warning: vectorisation failure: vectAlgCase: data constructor not vectorised GHC.Types.I#

kruskal ... = emptyP

10) fst and snd do not work on PArray Tuple

blah e = f (snd e)

*** Vectorisation error ***
    Variable not vectorised: Data.Tuple.snd

blah e@(n1, n2) = f n2

11) ==

Int == Int becomes 
import Data.Array.Parallel.Prelude.Int as I
Int I.== Int

*** Vectorisation error ***
    Variable not vectorised: GHC.Classes.eqInt

Check every ==. Including in pattern matching guards

12) n-patterns not supported

queensW :: Int -> ...
queensW 0 = 
queensW 1 =
queensW n =
results in 
exprType TYPE main:NQDPH.Solution{tc r32m}
*** Vectorisation error ***
    Can't vectorise expression GHC.Prim.Int#

solution is to use guards
queensW n | n == 0 =
          | n == 1 =
          | otherwise = 

13) List Comphrensions seem to result in crossMapP not implemented

f :: [:Int:] -> [:Int:] -> [:Int:]
f as bs = [: a I.+ b | a <- as, b <- bs :]
-- crossMapP not implemented

g :: [:Int:] -> [:Int:] -> [:Int:]
g as bs = [: a I.+ b | a <- as | b <- bs :]
-- parallel list comprehension works but is not the same as f or h

h :: [:Int:] -> [:Int:] -> [:Int:]
h as bs = concatP [: [: a I.+ b | b <- bs :] | a <- as :]
-- works

14) No Trace or TraceShow

*** Vectorisation error ***
    Variable not vectorised: Debug.Trace.traceShow

15) Type Aliases
NB: OK, this seems to be a bug in DPH 0.6 as this doesn't happen in DPH 0.8

Vector in Data.Vector is NOT THE SAME as Vector in Data.Array.Parallel.Unlifted.Sequential.Vector. The naming is unfortunate.

The following error message was not complaining about a differing version of Data.Vector
like I originally thought, but of the fact they are differing data structures.

    Couldn't match expected type `PU.Array a0'
                with actual type `vector-0.9.1:Data.Vector.Vector a1'

Incidently, Array is an alias to Data.Array.Para.....Vector

toVector :: PA a => PArray a -> Vector a

won't work if you try and hGet

hGet IOElt a => Handle -> Array a -> IO ()
type Array = Data.Array.Parallel.Unlifted.Sequential.Vector.Vector

instead:

toUArray :: Scalar a => PArray a -> Array a

16) Vector -> PArray requires consideration.
Similar to (15). This won't work on DPH 0.6

Performance is poor if you use Data.Array.Parallel.PArray.fromList (Data.Vector.Unboxed.toList someVector)
Instead use Data.Array.Parallel.PArray.Scalar.fromUArray someVector

Went from slowdown to a speedup.